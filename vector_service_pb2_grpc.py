# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vector_service_pb2 as vector__service__pb2


class VectorServiceStub(object):
    """VectorService defines the set of RPC methods available for vector operations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEmbedding = channel.unary_unary(
                '/vector.VectorService/GetEmbedding',
                request_serializer=vector__service__pb2.GetEmbeddingRequest.SerializeToString,
                response_deserializer=vector__service__pb2.GetEmbeddingResponse.FromString,
                )
        self.GetSimilarity = channel.unary_unary(
                '/vector.VectorService/GetSimilarity',
                request_serializer=vector__service__pb2.GetSimilarityRequest.SerializeToString,
                response_deserializer=vector__service__pb2.GetSimilarityResponse.FromString,
                )
        self.LoadQueries = channel.unary_unary(
                '/vector.VectorService/LoadQueries',
                request_serializer=vector__service__pb2.LoadQueryRequest.SerializeToString,
                response_deserializer=vector__service__pb2.LoadQueryResponse.FromString,
                )


class VectorServiceServicer(object):
    """VectorService defines the set of RPC methods available for vector operations.
    """

    def GetEmbedding(self, request, context):
        """GetEmbedding converts a text into its corresponding embedding.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSimilarity(self, request, context):
        """GetSimilarity calculates the similarity between a query embedding and a list of data embeddings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadQueries(self, request, context):
        """LoadQueries loads a list of queries into the service. These queries will be converted to embeddings and stored for
        future similarity checks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEmbedding,
                    request_deserializer=vector__service__pb2.GetEmbeddingRequest.FromString,
                    response_serializer=vector__service__pb2.GetEmbeddingResponse.SerializeToString,
            ),
            'GetSimilarity': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSimilarity,
                    request_deserializer=vector__service__pb2.GetSimilarityRequest.FromString,
                    response_serializer=vector__service__pb2.GetSimilarityResponse.SerializeToString,
            ),
            'LoadQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadQueries,
                    request_deserializer=vector__service__pb2.LoadQueryRequest.FromString,
                    response_serializer=vector__service__pb2.LoadQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vector.VectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VectorService(object):
    """VectorService defines the set of RPC methods available for vector operations.
    """

    @staticmethod
    def GetEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vector.VectorService/GetEmbedding',
            vector__service__pb2.GetEmbeddingRequest.SerializeToString,
            vector__service__pb2.GetEmbeddingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSimilarity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vector.VectorService/GetSimilarity',
            vector__service__pb2.GetSimilarityRequest.SerializeToString,
            vector__service__pb2.GetSimilarityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vector.VectorService/LoadQueries',
            vector__service__pb2.LoadQueryRequest.SerializeToString,
            vector__service__pb2.LoadQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
